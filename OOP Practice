# Base class
class Animal:
    def __init__(self, name):
        self.name = name
    
    def speak(self):
        raise NotImplementedError("Subclass must implement abstract method")
    
    def __str__(self):
        return f"{self.name} is an animal."

# Derived class 1
class Dog(Animal):
    def speak(self):
        return f"{self.name} says Woof!"

# Derived class 2
class Cat(Animal):
    def speak(self):
        return f"{self.name} says Meow!"

# Another derived class demonstrating polymorphism
class Cow(Animal):
    def speak(self):
        return f"{self.name} says Moo!"

# Function to demonstrate polymorphism
def animal_sound(animal):
    print(animal.speak())

# Create instances of each class
dog = Dog("Buddy")
cat = Cat("Whiskers")
cow = Cow("Bessie")

# Print object descriptions
print(dog)
print(cat)
print(cow)

# Call the speak method for each animal
animal_sound(dog)
animal_sound(cat)
animal_sound(cow)
